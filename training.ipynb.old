{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "import json\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras.models import Sequential # type: ignore\n",
    "from tensorflow.keras.layers import Dense, Embedding, GlobalAveragePooling1D # type: ignore\n",
    "from tensorflow.keras.preprocessing.text import Tokenizer # type: ignore\n",
    "from tensorflow.keras.preprocessing.sequence import pad_sequences # type: ignore\n",
    "from sklearn.preprocessing import LabelEncoder\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "with open('intents.json') as file:\n",
    "    data=json.load(file)\n",
    "\n",
    "sample_sentences=[]\n",
    "sample_labels=[]\n",
    "labels=[]\n",
    "responses=[]\n",
    "\n",
    "for sentence in data['intents']:\n",
    "    for q in sentence['questions']:\n",
    "        sample_sentences.append(q)\n",
    "        sample_labels.append(sentence['tag'])\n",
    "    responses.append(sentence['responses'])\n",
    "    if sentence['tag'] not in labels:\n",
    "        labels.append(sentence['tag'])\n",
    "\n",
    "num_classes=len(labels)\n",
    "\n",
    "# conversion into model understandable form\n",
    "label_encoder=LabelEncoder()\n",
    "label_encoder.fit(sample_labels)\n",
    "sample_labels=label_encoder.transform(sample_labels)\n",
    "\n",
    "\n",
    "# oov replaces out of the vocabulary words with a special token\n",
    "tokenizer=Tokenizer(num_words=1000,oov_token=\"<OOV>\") # create a vocabulary with limited words\n",
    "tokenizer.fit_on_texts(sample_sentences) # update vocabulary based on sentences\n",
    "word_index=tokenizer.word_index # words indexes in vocabulary\n",
    "sequences=tokenizer.texts_to_sequences(sample_sentences) # transform texts into sequences of integers\n",
    "\n",
    "# transform list of integers into a 2D numpy array (num_samples, num_timesteps)\n",
    "max_padding = 20 # max len of all sequences that others will be 'cut' to\n",
    "padded_sequences=pad_sequences(sequences, truncating='post', maxlen=max_padding)\n",
    "\n",
    "# neural network\n",
    "model=Sequential()\n",
    "max_input = 1000\n",
    "emb_dim = 16\n",
    "model.add(Embedding(max_input, emb_dim, input_length=max_padding)) # turn positive indexes into a dense vectors of fixed size\n",
    "model.add(GlobalAveragePooling1D()) # create fixed-length vector for each example by averaging on the sequence dim\n",
    "model.add(Dense(16, activation='relu')) # implement the activation operation on the input and give an output of length 16\n",
    "model.add(Dense(16, activation='relu'))\n",
    "model.add(Dense(num_classes, activation='softmax')) # output layer with a result of length of labels (categories)\n",
    "\n",
    "# stochastic gradient descent for large models (adam), loss function for more than two labels\n",
    "model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "# model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Epoch 1: loss improved from inf to 1.79174, saving model to best_model.h5\n",
      "\n",
      "Epoch 2: loss improved from 1.79174 to 1.79089, saving model to best_model.h5\n",
      "\n",
      "Epoch 3: loss improved from 1.79089 to 1.79014, saving model to best_model.h5\n",
      "\n",
      "Epoch 4: loss improved from 1.79014 to 1.78941, saving model to best_model.h5\n",
      "\n",
      "Epoch 5: loss improved from 1.78941 to 1.78874, saving model to best_model.h5\n",
      "\n",
      "Epoch 6: loss improved from 1.78874 to 1.78813, saving model to best_model.h5\n",
      "\n",
      "Epoch 7: loss improved from 1.78813 to 1.78751, saving model to best_model.h5\n",
      "\n",
      "Epoch 8: loss improved from 1.78751 to 1.78687, saving model to best_model.h5\n",
      "\n",
      "Epoch 9: loss improved from 1.78687 to 1.78624, saving model to best_model.h5\n",
      "\n",
      "Epoch 10: loss improved from 1.78624 to 1.78560, saving model to best_model.h5\n",
      "\n",
      "Epoch 11: loss improved from 1.78560 to 1.78495, saving model to best_model.h5\n",
      "\n",
      "Epoch 12: loss improved from 1.78495 to 1.78428, saving model to best_model.h5\n",
      "\n",
      "Epoch 13: loss improved from 1.78428 to 1.78364, saving model to best_model.h5\n",
      "\n",
      "Epoch 14: loss improved from 1.78364 to 1.78300, saving model to best_model.h5\n",
      "\n",
      "Epoch 15: loss improved from 1.78300 to 1.78235, saving model to best_model.h5\n",
      "\n",
      "Epoch 16: loss improved from 1.78235 to 1.78169, saving model to best_model.h5\n",
      "\n",
      "Epoch 17: loss improved from 1.78169 to 1.78104, saving model to best_model.h5\n",
      "\n",
      "Epoch 18: loss improved from 1.78104 to 1.78037, saving model to best_model.h5\n",
      "\n",
      "Epoch 19: loss improved from 1.78037 to 1.77970, saving model to best_model.h5\n",
      "\n",
      "Epoch 20: loss improved from 1.77970 to 1.77902, saving model to best_model.h5\n",
      "\n",
      "Epoch 21: loss improved from 1.77902 to 1.77834, saving model to best_model.h5\n",
      "\n",
      "Epoch 22: loss improved from 1.77834 to 1.77765, saving model to best_model.h5\n",
      "\n",
      "Epoch 23: loss improved from 1.77765 to 1.77696, saving model to best_model.h5\n",
      "\n",
      "Epoch 24: loss improved from 1.77696 to 1.77626, saving model to best_model.h5\n",
      "\n",
      "Epoch 25: loss improved from 1.77626 to 1.77555, saving model to best_model.h5\n",
      "\n",
      "Epoch 26: loss improved from 1.77555 to 1.77484, saving model to best_model.h5\n",
      "\n",
      "Epoch 27: loss improved from 1.77484 to 1.77411, saving model to best_model.h5\n",
      "\n",
      "Epoch 28: loss improved from 1.77411 to 1.77338, saving model to best_model.h5\n",
      "\n",
      "Epoch 29: loss improved from 1.77338 to 1.77262, saving model to best_model.h5\n",
      "\n",
      "Epoch 30: loss improved from 1.77262 to 1.77186, saving model to best_model.h5\n",
      "\n",
      "Epoch 31: loss improved from 1.77186 to 1.77110, saving model to best_model.h5\n",
      "\n",
      "Epoch 32: loss improved from 1.77110 to 1.77034, saving model to best_model.h5\n",
      "\n",
      "Epoch 33: loss improved from 1.77034 to 1.76960, saving model to best_model.h5\n",
      "\n",
      "Epoch 34: loss improved from 1.76960 to 1.76882, saving model to best_model.h5\n",
      "\n",
      "Epoch 35: loss improved from 1.76882 to 1.76802, saving model to best_model.h5\n",
      "\n",
      "Epoch 36: loss improved from 1.76802 to 1.76721, saving model to best_model.h5\n",
      "\n",
      "Epoch 37: loss improved from 1.76721 to 1.76641, saving model to best_model.h5\n",
      "\n",
      "Epoch 38: loss improved from 1.76641 to 1.76559, saving model to best_model.h5\n",
      "\n",
      "Epoch 39: loss improved from 1.76559 to 1.76477, saving model to best_model.h5\n",
      "\n",
      "Epoch 40: loss improved from 1.76477 to 1.76394, saving model to best_model.h5\n",
      "\n",
      "Epoch 41: loss improved from 1.76394 to 1.76310, saving model to best_model.h5\n",
      "\n",
      "Epoch 42: loss improved from 1.76310 to 1.76224, saving model to best_model.h5\n",
      "\n",
      "Epoch 43: loss improved from 1.76224 to 1.76138, saving model to best_model.h5\n",
      "\n",
      "Epoch 44: loss improved from 1.76138 to 1.76050, saving model to best_model.h5\n",
      "\n",
      "Epoch 45: loss improved from 1.76050 to 1.75962, saving model to best_model.h5\n",
      "\n",
      "Epoch 46: loss improved from 1.75962 to 1.75872, saving model to best_model.h5\n",
      "\n",
      "Epoch 47: loss improved from 1.75872 to 1.75782, saving model to best_model.h5\n",
      "\n",
      "Epoch 48: loss improved from 1.75782 to 1.75690, saving model to best_model.h5\n",
      "\n",
      "Epoch 49: loss improved from 1.75690 to 1.75598, saving model to best_model.h5\n",
      "\n",
      "Epoch 50: loss improved from 1.75598 to 1.75504, saving model to best_model.h5\n",
      "\n",
      "Epoch 51: loss improved from 1.75504 to 1.75410, saving model to best_model.h5\n",
      "\n",
      "Epoch 52: loss improved from 1.75410 to 1.75315, saving model to best_model.h5\n",
      "\n",
      "Epoch 53: loss improved from 1.75315 to 1.75218, saving model to best_model.h5\n",
      "\n",
      "Epoch 54: loss improved from 1.75218 to 1.75121, saving model to best_model.h5\n",
      "\n",
      "Epoch 55: loss improved from 1.75121 to 1.75022, saving model to best_model.h5\n",
      "\n",
      "Epoch 56: loss improved from 1.75022 to 1.74923, saving model to best_model.h5\n",
      "\n",
      "Epoch 57: loss improved from 1.74923 to 1.74823, saving model to best_model.h5\n",
      "\n",
      "Epoch 58: loss improved from 1.74823 to 1.74722, saving model to best_model.h5\n",
      "\n",
      "Epoch 59: loss improved from 1.74722 to 1.74620, saving model to best_model.h5\n",
      "\n",
      "Epoch 60: loss improved from 1.74620 to 1.74517, saving model to best_model.h5\n",
      "\n",
      "Epoch 61: loss improved from 1.74517 to 1.74414, saving model to best_model.h5\n",
      "\n",
      "Epoch 62: loss improved from 1.74414 to 1.74310, saving model to best_model.h5\n",
      "\n",
      "Epoch 63: loss improved from 1.74310 to 1.74204, saving model to best_model.h5\n",
      "\n",
      "Epoch 64: loss improved from 1.74204 to 1.74098, saving model to best_model.h5\n",
      "\n",
      "Epoch 65: loss improved from 1.74098 to 1.73992, saving model to best_model.h5\n",
      "\n",
      "Epoch 66: loss improved from 1.73992 to 1.73884, saving model to best_model.h5\n",
      "\n",
      "Epoch 67: loss improved from 1.73884 to 1.73776, saving model to best_model.h5\n",
      "\n",
      "Epoch 68: loss improved from 1.73776 to 1.73668, saving model to best_model.h5\n",
      "\n",
      "Epoch 69: loss improved from 1.73668 to 1.73558, saving model to best_model.h5\n",
      "\n",
      "Epoch 70: loss improved from 1.73558 to 1.73445, saving model to best_model.h5\n",
      "\n",
      "Epoch 71: loss improved from 1.73445 to 1.73331, saving model to best_model.h5\n",
      "\n",
      "Epoch 72: loss improved from 1.73331 to 1.73218, saving model to best_model.h5\n",
      "\n",
      "Epoch 73: loss improved from 1.73218 to 1.73103, saving model to best_model.h5\n",
      "\n",
      "Epoch 74: loss improved from 1.73103 to 1.72992, saving model to best_model.h5\n",
      "\n",
      "Epoch 75: loss improved from 1.72992 to 1.72878, saving model to best_model.h5\n",
      "\n",
      "Epoch 76: loss improved from 1.72878 to 1.72762, saving model to best_model.h5\n",
      "\n",
      "Epoch 77: loss improved from 1.72762 to 1.72645, saving model to best_model.h5\n",
      "\n",
      "Epoch 78: loss improved from 1.72645 to 1.72527, saving model to best_model.h5\n",
      "\n",
      "Epoch 79: loss improved from 1.72527 to 1.72407, saving model to best_model.h5\n",
      "\n",
      "Epoch 80: loss improved from 1.72407 to 1.72289, saving model to best_model.h5\n",
      "\n",
      "Epoch 81: loss improved from 1.72289 to 1.72169, saving model to best_model.h5\n",
      "\n",
      "Epoch 82: loss improved from 1.72169 to 1.72046, saving model to best_model.h5\n",
      "\n",
      "Epoch 83: loss improved from 1.72046 to 1.71921, saving model to best_model.h5\n",
      "\n",
      "Epoch 84: loss improved from 1.71921 to 1.71797, saving model to best_model.h5\n",
      "\n",
      "Epoch 85: loss improved from 1.71797 to 1.71672, saving model to best_model.h5\n",
      "\n",
      "Epoch 86: loss improved from 1.71672 to 1.71545, saving model to best_model.h5\n",
      "\n",
      "Epoch 87: loss improved from 1.71545 to 1.71415, saving model to best_model.h5\n",
      "\n",
      "Epoch 88: loss improved from 1.71415 to 1.71286, saving model to best_model.h5\n",
      "\n",
      "Epoch 89: loss improved from 1.71286 to 1.71152, saving model to best_model.h5\n",
      "\n",
      "Epoch 90: loss improved from 1.71152 to 1.71018, saving model to best_model.h5\n",
      "\n",
      "Epoch 91: loss improved from 1.71018 to 1.70880, saving model to best_model.h5\n",
      "\n",
      "Epoch 92: loss improved from 1.70880 to 1.70741, saving model to best_model.h5\n",
      "\n",
      "Epoch 93: loss improved from 1.70741 to 1.70599, saving model to best_model.h5\n",
      "\n",
      "Epoch 94: loss improved from 1.70599 to 1.70453, saving model to best_model.h5\n",
      "\n",
      "Epoch 95: loss improved from 1.70453 to 1.70306, saving model to best_model.h5\n",
      "\n",
      "Epoch 96: loss improved from 1.70306 to 1.70158, saving model to best_model.h5\n",
      "\n",
      "Epoch 97: loss improved from 1.70158 to 1.70007, saving model to best_model.h5\n",
      "\n",
      "Epoch 98: loss improved from 1.70007 to 1.69851, saving model to best_model.h5\n",
      "\n",
      "Epoch 99: loss improved from 1.69851 to 1.69692, saving model to best_model.h5\n",
      "\n",
      "Epoch 100: loss improved from 1.69692 to 1.69530, saving model to best_model.h5\n",
      "\n",
      "Epoch 101: loss improved from 1.69530 to 1.69366, saving model to best_model.h5\n",
      "\n",
      "Epoch 102: loss improved from 1.69366 to 1.69197, saving model to best_model.h5\n",
      "\n",
      "Epoch 103: loss improved from 1.69197 to 1.69023, saving model to best_model.h5\n",
      "\n",
      "Epoch 104: loss improved from 1.69023 to 1.68846, saving model to best_model.h5\n",
      "\n",
      "Epoch 105: loss improved from 1.68846 to 1.68664, saving model to best_model.h5\n",
      "\n",
      "Epoch 106: loss improved from 1.68664 to 1.68480, saving model to best_model.h5\n",
      "\n",
      "Epoch 107: loss improved from 1.68480 to 1.68291, saving model to best_model.h5\n",
      "\n",
      "Epoch 108: loss improved from 1.68291 to 1.68097, saving model to best_model.h5\n",
      "\n",
      "Epoch 109: loss improved from 1.68097 to 1.67899, saving model to best_model.h5\n",
      "\n",
      "Epoch 110: loss improved from 1.67899 to 1.67696, saving model to best_model.h5\n",
      "\n",
      "Epoch 111: loss improved from 1.67696 to 1.67487, saving model to best_model.h5\n",
      "\n",
      "Epoch 112: loss improved from 1.67487 to 1.67276, saving model to best_model.h5\n",
      "\n",
      "Epoch 113: loss improved from 1.67276 to 1.67058, saving model to best_model.h5\n",
      "\n",
      "Epoch 114: loss improved from 1.67058 to 1.66834, saving model to best_model.h5\n",
      "\n",
      "Epoch 115: loss improved from 1.66834 to 1.66607, saving model to best_model.h5\n",
      "\n",
      "Epoch 116: loss improved from 1.66607 to 1.66375, saving model to best_model.h5\n",
      "\n",
      "Epoch 117: loss improved from 1.66375 to 1.66138, saving model to best_model.h5\n",
      "\n",
      "Epoch 118: loss improved from 1.66138 to 1.65894, saving model to best_model.h5\n",
      "\n",
      "Epoch 119: loss improved from 1.65894 to 1.65649, saving model to best_model.h5\n",
      "\n",
      "Epoch 120: loss improved from 1.65649 to 1.65394, saving model to best_model.h5\n",
      "\n",
      "Epoch 121: loss improved from 1.65394 to 1.65137, saving model to best_model.h5\n",
      "\n",
      "Epoch 122: loss improved from 1.65137 to 1.64874, saving model to best_model.h5\n",
      "\n",
      "Epoch 123: loss improved from 1.64874 to 1.64601, saving model to best_model.h5\n",
      "\n",
      "Epoch 124: loss improved from 1.64601 to 1.64327, saving model to best_model.h5\n",
      "\n",
      "Epoch 125: loss improved from 1.64327 to 1.64046, saving model to best_model.h5\n",
      "\n",
      "Epoch 126: loss improved from 1.64046 to 1.63757, saving model to best_model.h5\n",
      "\n",
      "Epoch 127: loss improved from 1.63757 to 1.63464, saving model to best_model.h5\n",
      "\n",
      "Epoch 128: loss improved from 1.63464 to 1.63164, saving model to best_model.h5\n",
      "\n",
      "Epoch 129: loss improved from 1.63164 to 1.62857, saving model to best_model.h5\n",
      "\n",
      "Epoch 130: loss improved from 1.62857 to 1.62545, saving model to best_model.h5\n",
      "\n",
      "Epoch 131: loss improved from 1.62545 to 1.62226, saving model to best_model.h5\n",
      "\n",
      "Epoch 132: loss improved from 1.62226 to 1.61898, saving model to best_model.h5\n",
      "\n",
      "Epoch 133: loss improved from 1.61898 to 1.61567, saving model to best_model.h5\n",
      "\n",
      "Epoch 134: loss improved from 1.61567 to 1.61229, saving model to best_model.h5\n",
      "\n",
      "Epoch 135: loss improved from 1.61229 to 1.60882, saving model to best_model.h5\n",
      "\n",
      "Epoch 136: loss improved from 1.60882 to 1.60531, saving model to best_model.h5\n",
      "\n",
      "Epoch 137: loss improved from 1.60531 to 1.60172, saving model to best_model.h5\n",
      "\n",
      "Epoch 138: loss improved from 1.60172 to 1.59807, saving model to best_model.h5\n",
      "\n",
      "Epoch 139: loss improved from 1.59807 to 1.59435, saving model to best_model.h5\n",
      "\n",
      "Epoch 140: loss improved from 1.59435 to 1.59056, saving model to best_model.h5\n",
      "\n",
      "Epoch 141: loss improved from 1.59056 to 1.58670, saving model to best_model.h5\n",
      "\n",
      "Epoch 142: loss improved from 1.58670 to 1.58277, saving model to best_model.h5\n",
      "\n",
      "Epoch 143: loss improved from 1.58277 to 1.57876, saving model to best_model.h5\n",
      "\n",
      "Epoch 144: loss improved from 1.57876 to 1.57469, saving model to best_model.h5\n",
      "\n",
      "Epoch 145: loss improved from 1.57469 to 1.57056, saving model to best_model.h5\n",
      "\n",
      "Epoch 146: loss improved from 1.57056 to 1.56635, saving model to best_model.h5\n",
      "\n",
      "Epoch 147: loss improved from 1.56635 to 1.56208, saving model to best_model.h5\n",
      "\n",
      "Epoch 148: loss improved from 1.56208 to 1.55774, saving model to best_model.h5\n",
      "\n",
      "Epoch 149: loss improved from 1.55774 to 1.55332, saving model to best_model.h5\n",
      "\n",
      "Epoch 150: loss improved from 1.55332 to 1.54882, saving model to best_model.h5\n",
      "\n",
      "Epoch 151: loss improved from 1.54882 to 1.54421, saving model to best_model.h5\n",
      "\n",
      "Epoch 152: loss improved from 1.54421 to 1.53950, saving model to best_model.h5\n",
      "\n",
      "Epoch 153: loss improved from 1.53950 to 1.53460, saving model to best_model.h5\n",
      "\n",
      "Epoch 154: loss improved from 1.53460 to 1.52968, saving model to best_model.h5\n",
      "\n",
      "Epoch 155: loss improved from 1.52968 to 1.52463, saving model to best_model.h5\n",
      "\n",
      "Epoch 156: loss improved from 1.52463 to 1.51943, saving model to best_model.h5\n",
      "\n",
      "Epoch 157: loss improved from 1.51943 to 1.51426, saving model to best_model.h5\n",
      "\n",
      "Epoch 158: loss improved from 1.51426 to 1.50896, saving model to best_model.h5\n",
      "\n",
      "Epoch 159: loss improved from 1.50896 to 1.50359, saving model to best_model.h5\n",
      "\n",
      "Epoch 160: loss improved from 1.50359 to 1.49826, saving model to best_model.h5\n",
      "\n",
      "Epoch 161: loss improved from 1.49826 to 1.49278, saving model to best_model.h5\n",
      "\n",
      "Epoch 162: loss improved from 1.49278 to 1.48726, saving model to best_model.h5\n",
      "\n",
      "Epoch 163: loss improved from 1.48726 to 1.48171, saving model to best_model.h5\n",
      "\n",
      "Epoch 164: loss improved from 1.48171 to 1.47610, saving model to best_model.h5\n",
      "\n",
      "Epoch 165: loss improved from 1.47610 to 1.47042, saving model to best_model.h5\n",
      "\n",
      "Epoch 166: loss improved from 1.47042 to 1.46454, saving model to best_model.h5\n",
      "\n",
      "Epoch 167: loss improved from 1.46454 to 1.45875, saving model to best_model.h5\n",
      "\n",
      "Epoch 168: loss improved from 1.45875 to 1.45298, saving model to best_model.h5\n",
      "\n",
      "Epoch 169: loss improved from 1.45298 to 1.44693, saving model to best_model.h5\n",
      "\n",
      "Epoch 170: loss improved from 1.44693 to 1.44102, saving model to best_model.h5\n",
      "\n",
      "Epoch 171: loss improved from 1.44102 to 1.43510, saving model to best_model.h5\n",
      "\n",
      "Epoch 172: loss improved from 1.43510 to 1.42908, saving model to best_model.h5\n",
      "\n",
      "Epoch 173: loss improved from 1.42908 to 1.42303, saving model to best_model.h5\n",
      "\n",
      "Epoch 174: loss improved from 1.42303 to 1.41703, saving model to best_model.h5\n",
      "\n",
      "Epoch 175: loss improved from 1.41703 to 1.41103, saving model to best_model.h5\n",
      "\n",
      "Epoch 176: loss improved from 1.41103 to 1.40502, saving model to best_model.h5\n",
      "\n",
      "Epoch 177: loss improved from 1.40502 to 1.39906, saving model to best_model.h5\n",
      "\n",
      "Epoch 178: loss improved from 1.39906 to 1.39311, saving model to best_model.h5\n",
      "\n",
      "Epoch 179: loss improved from 1.39311 to 1.38719, saving model to best_model.h5\n",
      "\n",
      "Epoch 180: loss improved from 1.38719 to 1.38127, saving model to best_model.h5\n",
      "\n",
      "Epoch 181: loss improved from 1.38127 to 1.37532, saving model to best_model.h5\n",
      "\n",
      "Epoch 182: loss improved from 1.37532 to 1.36942, saving model to best_model.h5\n",
      "\n",
      "Epoch 183: loss improved from 1.36942 to 1.36356, saving model to best_model.h5\n",
      "\n",
      "Epoch 184: loss improved from 1.36356 to 1.35767, saving model to best_model.h5\n",
      "\n",
      "Epoch 185: loss improved from 1.35767 to 1.35178, saving model to best_model.h5\n",
      "\n",
      "Epoch 186: loss improved from 1.35178 to 1.34590, saving model to best_model.h5\n",
      "\n",
      "Epoch 187: loss improved from 1.34590 to 1.34002, saving model to best_model.h5\n",
      "\n",
      "Epoch 188: loss improved from 1.34002 to 1.33417, saving model to best_model.h5\n",
      "\n",
      "Epoch 189: loss improved from 1.33417 to 1.32833, saving model to best_model.h5\n",
      "\n",
      "Epoch 190: loss improved from 1.32833 to 1.32247, saving model to best_model.h5\n",
      "\n",
      "Epoch 191: loss improved from 1.32247 to 1.31665, saving model to best_model.h5\n",
      "\n",
      "Epoch 192: loss improved from 1.31665 to 1.31087, saving model to best_model.h5\n",
      "\n",
      "Epoch 193: loss improved from 1.31087 to 1.30510, saving model to best_model.h5\n",
      "\n",
      "Epoch 194: loss improved from 1.30510 to 1.29934, saving model to best_model.h5\n",
      "\n",
      "Epoch 195: loss improved from 1.29934 to 1.29365, saving model to best_model.h5\n",
      "\n",
      "Epoch 196: loss improved from 1.29365 to 1.28798, saving model to best_model.h5\n",
      "\n",
      "Epoch 197: loss improved from 1.28798 to 1.28232, saving model to best_model.h5\n",
      "\n",
      "Epoch 198: loss improved from 1.28232 to 1.27667, saving model to best_model.h5\n",
      "\n",
      "Epoch 199: loss improved from 1.27667 to 1.27108, saving model to best_model.h5\n",
      "\n",
      "Epoch 200: loss improved from 1.27108 to 1.26555, saving model to best_model.h5\n",
      "\n",
      "Epoch 201: loss improved from 1.26555 to 1.26010, saving model to best_model.h5\n",
      "\n",
      "Epoch 202: loss improved from 1.26010 to 1.25463, saving model to best_model.h5\n",
      "\n",
      "Epoch 203: loss improved from 1.25463 to 1.24913, saving model to best_model.h5\n",
      "\n",
      "Epoch 204: loss improved from 1.24913 to 1.24363, saving model to best_model.h5\n",
      "\n",
      "Epoch 205: loss improved from 1.24363 to 1.23814, saving model to best_model.h5\n",
      "\n",
      "Epoch 206: loss improved from 1.23814 to 1.23276, saving model to best_model.h5\n",
      "\n",
      "Epoch 207: loss improved from 1.23276 to 1.22750, saving model to best_model.h5\n",
      "\n",
      "Epoch 208: loss improved from 1.22750 to 1.22222, saving model to best_model.h5\n",
      "\n",
      "Epoch 209: loss improved from 1.22222 to 1.21713, saving model to best_model.h5\n",
      "\n",
      "Epoch 210: loss improved from 1.21713 to 1.21204, saving model to best_model.h5\n",
      "\n",
      "Epoch 211: loss improved from 1.21204 to 1.20684, saving model to best_model.h5\n",
      "\n",
      "Epoch 212: loss improved from 1.20684 to 1.20155, saving model to best_model.h5\n",
      "\n",
      "Epoch 213: loss improved from 1.20155 to 1.19638, saving model to best_model.h5\n",
      "\n",
      "Epoch 214: loss improved from 1.19638 to 1.19121, saving model to best_model.h5\n",
      "\n",
      "Epoch 215: loss improved from 1.19121 to 1.18628, saving model to best_model.h5\n",
      "\n",
      "Epoch 216: loss improved from 1.18628 to 1.18142, saving model to best_model.h5\n",
      "\n",
      "Epoch 217: loss improved from 1.18142 to 1.17655, saving model to best_model.h5\n",
      "\n",
      "Epoch 218: loss improved from 1.17655 to 1.17178, saving model to best_model.h5\n",
      "\n",
      "Epoch 219: loss improved from 1.17178 to 1.16705, saving model to best_model.h5\n",
      "\n",
      "Epoch 220: loss improved from 1.16705 to 1.16226, saving model to best_model.h5\n",
      "\n",
      "Epoch 221: loss improved from 1.16226 to 1.15764, saving model to best_model.h5\n",
      "\n",
      "Epoch 222: loss improved from 1.15764 to 1.15312, saving model to best_model.h5\n",
      "\n",
      "Epoch 223: loss improved from 1.15312 to 1.14854, saving model to best_model.h5\n",
      "\n",
      "Epoch 224: loss improved from 1.14854 to 1.14398, saving model to best_model.h5\n",
      "\n",
      "Epoch 225: loss improved from 1.14398 to 1.13943, saving model to best_model.h5\n",
      "\n",
      "Epoch 226: loss improved from 1.13943 to 1.13494, saving model to best_model.h5\n",
      "\n",
      "Epoch 227: loss improved from 1.13494 to 1.13046, saving model to best_model.h5\n",
      "\n",
      "Epoch 228: loss improved from 1.13046 to 1.12599, saving model to best_model.h5\n",
      "\n",
      "Epoch 229: loss improved from 1.12599 to 1.12156, saving model to best_model.h5\n",
      "\n",
      "Epoch 230: loss improved from 1.12156 to 1.11729, saving model to best_model.h5\n",
      "\n",
      "Epoch 231: loss improved from 1.11729 to 1.11299, saving model to best_model.h5\n",
      "\n",
      "Epoch 232: loss improved from 1.11299 to 1.10867, saving model to best_model.h5\n",
      "\n",
      "Epoch 233: loss improved from 1.10867 to 1.10431, saving model to best_model.h5\n",
      "\n",
      "Epoch 234: loss improved from 1.10431 to 1.10006, saving model to best_model.h5\n",
      "\n",
      "Epoch 235: loss improved from 1.10006 to 1.09583, saving model to best_model.h5\n",
      "\n",
      "Epoch 236: loss improved from 1.09583 to 1.09167, saving model to best_model.h5\n",
      "\n",
      "Epoch 237: loss improved from 1.09167 to 1.08761, saving model to best_model.h5\n",
      "\n",
      "Epoch 238: loss improved from 1.08761 to 1.08349, saving model to best_model.h5\n",
      "\n",
      "Epoch 239: loss improved from 1.08349 to 1.07944, saving model to best_model.h5\n",
      "\n",
      "Epoch 240: loss improved from 1.07944 to 1.07540, saving model to best_model.h5\n",
      "\n",
      "Epoch 241: loss improved from 1.07540 to 1.07131, saving model to best_model.h5\n",
      "Epoch 241: early stopping\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAi0AAAGzCAYAAADjbSfcAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAsP0lEQVR4nO3df3TU1YH//9fk1wQIScBAwo9AILRQigQFSWNF2WNqcK1rFV1w2U2MXdyC+FFTPZb1NPjjY2OV5bBlWdivW6RaqqxW+8O67Bcj0bVGsCBFRGlJgQCShKAkIYEkzNzPH7xnkskPYCAwd2aej3PmkLznzuTOTd4zL+6973tdxhgjAAAAy8WEugIAAADngtACAADCAqEFAACEBUILAAAIC4QWAAAQFggtAAAgLBBaAABAWCC0AACAsEBoAQAAYYHQAgAAwgKhBQAAhAVCCwAACAuEFgBWa25uDnUVAFiC0AJEmf3792vhwoUaP368+vXrp8suu0x33HGH9u3b163ssWPH9OCDDyorK0tut1sjR45UYWGh6uvr/WVOnjypxx57TF/96leVmJioYcOG6bbbblNVVZUkqaKiQi6XSxUVFQHPvW/fPrlcLq1du9Z/7K677lJSUpKqqqr013/91xo4cKDmzZsnSfrf//1f3XHHHRo1apTcbrcyMzP14IMP6sSJE93q/dlnn+lv//ZvNWTIEPXr10/jx4/Xo48+KknatGmTXC6XXn/99W6P+8UvfiGXy6XKyspgmxXAJRAX6goAuLQ+/PBDvf/++5o7d65Gjhypffv2adWqVZo5c6Z27dql/v37S5KOHz+uGTNm6NNPP9Xdd9+tK6+8UvX19frNb36jgwcPKi0tTR6PR9/+9rdVXl6uuXPn6v7771dTU5M2btyonTt3Kjs7O+j6nTp1SgUFBbrmmmu0dOlSf31eeeUVtbS0aMGCBbrsssu0ZcsWrVixQgcPHtQrr7zif/yOHTs0Y8YMxcfH65577lFWVpaqqqr029/+Vk899ZRmzpypzMxMrVu3TrfeemvAz163bp2ys7OVl5d3AS0M4KIxAKJKS0tLt2OVlZVGknnhhRf8x0pLS40k89prr3Ur7/V6jTHGrFmzxkgyy5Yt67XMpk2bjCSzadOmgPv37t1rJJnnn3/ef6yoqMhIMj/4wQ/Oqd5lZWXG5XKZ/fv3+49de+21ZuDAgQHHOtfHGGMWL15s3G63OXbsmP9YXV2diYuLM0uWLOn2cwDYgeEhIMr069fP/3V7e7uOHj2qcePGKTU1Vdu2bfPf98tf/lI5OTndeiMkyeVy+cukpaXpvvvu67XM+ViwYMEZ693c3Kz6+npdffXVMsboo48+kiQdOXJE7777ru6++26NGjWq1/oUFhaqtbVVr776qv/Y+vXrderUKf393//9edcbwMVFaAGizIkTJ1RaWqrMzEy53W6lpaVpyJAhOnbsmBoaGvzlqqqqNGnSpDM+V1VVlcaPH6+4uL4baY6Li9PIkSO7Ha+urtZdd92lwYMHKykpSUOGDNF1110nSf56/+Uvf5Gks9Z7woQJuuqqq7Ru3Tr/sXXr1ukb3/iGxo0b11cvBUAfY04LEGXuu+8+Pf/883rggQeUl5enlJQUuVwuzZ07V16vt89/Xm89Lh6Pp8fjbrdbMTEx3cp+61vf0hdffKFHHnlEEyZM0IABA3To0CHddddd51XvwsJC3X///Tp48KBaW1v1wQcf6N/+7d+Cfh4Alw6hBYgyr776qoqKivQv//Iv/mMnT57UsWPHAsplZ2dr586dZ3yu7Oxsbd68We3t7YqPj++xzKBBgySp2/Pv37//nOv88ccf609/+pN+9rOfqbCw0H9848aNAeXGjh0rSWettyTNnTtXJSUleumll3TixAnFx8drzpw551wnAJcew0NAlImNjZUxJuDYihUruvV8zJ49W3/84x97vDTY9/jZs2ervr6+xx4KX5nRo0crNjZW7777bsD9//7v/x5UnTs/p+/rf/3Xfw0oN2TIEF177bVas2aNqqure6yPT1pamm688Ub9/Oc/17p16zRr1iylpaWdc50AXHr0tABR5tvf/rZefPFFpaSkaOLEiaqsrNRbb72lyy67LKDcww8/rFdffVV33HGH7r77bk2dOlVffPGFfvOb32j16tXKyclRYWGhXnjhBZWUlGjLli2aMWOGmpub9dZbb2nhwoW65ZZblJKSojvuuEMrVqyQy+VSdna23njjDdXV1Z1znSdMmKDs7Gw99NBDOnTokJKTk/XLX/5SX375ZbeyP/nJT3TNNdfoyiuv1D333KMxY8Zo3759+t3vfqft27cHlC0sLNTtt98uSXryySeDb0wAl1YIr1wCEAJffvmlKS4uNmlpaSYpKckUFBSY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fh4ThyPCyy+/bNxut1m7dq3ZtWuXueeee0xqamrAzGZcmO9///umoqLC7N271/z+9783+fn5Ji0tzdTV1RljjPne975nRo0aZd5++23zhz/8weTl5Zm8vLwQ1zr8NDU1mY8++sh89NFHRpJZtmyZ+eijj8z+/fuNMcY8/fTTJjU11fz61782O3bsMLfccosZM2aMOXHihP85Zs2aZa644gqzefNm895775mvfOUr5s477wzVS7Lemdq8qanJPPTQQ6aystLs3bvXvPXWW+bKK680X/nKV8zJkyf9z0GbB2/BggUmJSXFVFRUmMOHD/tvLS0t/jJne185deqUmTRpkrnhhhvM9u3bzYYNG8yQIUPM4sWLQ/GSwsLZ2n3Pnj3miSeeMH/4wx/M3r17za9//WszduxYc+211/qfo6/aPWpDizHGrFixwowaNcokJCSY6dOnmw8++CDUVYooc+bMMcOGDTMJCQlmxIgRZs6cOWbPnj3++0+cOGEWLlxoBg0aZPr3729uvfVWc/jw4RDWODxt2rTJSOp2KyoqMsacvuz5hz/8oUlPTzdut9tcf/31Zvfu3QHPcfToUXPnnXeapKQkk5ycbIqLi01TU1MIXk14OFObt7S0mBtuuMEMGTLExMfHm9GjR5v58+d3+w8RbR68ntpcknn++ef9Zc7lfWXfvn3mxhtvNP369TNpaWnm+9//vmlvb7/EryZ8nK3dq6urzbXXXmsGDx5s3G63GTdunHn44YdNQ0NDwPP0Rbu7nAoBAABYLSrntAAAgPBDaAEAAGGB0AIAAMICoQUAAIQFQgsAAAgLhBYAABAWCC0AACAsEFoAAEBYILQAAICwQGgBAABhgdACAADCwv8Dq/BklTYPsL8AAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as _update_step_xla while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: bot_model\\assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: bot_model\\assets\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt # type: ignore\n",
    "# training the model\n",
    "from keras import callbacks\n",
    "es = callbacks.EarlyStopping(monitor=\"loss\", mode=\"min\", min_delta=0.1, verbose=2, patience=20, baseline=None, start_from_epoch=200)\n",
    "mc =  callbacks.ModelCheckpoint('best_model.h5', monitor='loss', verbose=0, save_best_only=True)\n",
    "num_epochs = 1000\n",
    "hist=model.fit(padded_sequences, np.array(sample_labels), epochs=num_epochs, verbose=0, callbacks=[es,mc])\n",
    "# hist=model.fit(padded_sequences, np.array(sample_labels), epochs=num_epochs)\n",
    "\n",
    "# print(hist.history['accuracy'])\n",
    "# plot\n",
    "plt.plot(hist.history['accuracy'])\n",
    "plt.title('accuracy')\n",
    "plt.show()\n",
    "plt.plot(hist.history['loss'])\n",
    "plt.title('loss')\n",
    "plt.show()\n",
    "\n",
    "# save the model\n",
    "# model.save(\"bot_model\")\n",
    "# save the tokenizer and encoder\n",
    "import pickle\n",
    "with open('tokenizer.pickle', 'wb') as token:\n",
    "    pickle.dump(tokenizer, token, protocol=pickle.HIGHEST_PROTOCOL)\n",
    "with open('label_encoder.pickle', 'wb') as enc:\n",
    "    pickle.dump(label_encoder, enc, protocol=pickle.HIGHEST_PROTOCOL)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
